apply plugin: "java"
apply plugin: "scala"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// Configure Java
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Configure Scala
dependencies {
    compile libs.scala
    runtime libs.scalaCompiler // For the scalaConsole task
}

tasks.withType(ScalaCompile) { compileScala.scalaCompileOptions.useAnt = false }

// Add Provided Dependency Support
configurations { providedCompile }
sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

// Create a jar with the source code
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

// Create a jar with the scaladoc
task scaladocJar(type: Jar, dependsOn: scaladoc) {
    from scaladoc.destinationDir
    classifier "scaladoc"
    extension "jar"
}

// Create a shaded jar with all dependencies
shadowJar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

// Configure what to publish
publishing {
    publications {
        standard(MavenPublication) {
            // Maven info
            groupId = project.group
            artifactId = "${project.name}_${versions.scalaBase}"
            version = project.version

            // Artifacts to publish
            from components.java
            artifact sourcesJar
            artifact scaladocJar

            // Pom additions
            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', project.url)
                def scm = root.appendNode('scm')
                scm.appendNode('url', project.scmUrl)
                scm.appendNode('connection', project.scmConnection)
                scm.appendNode('developerConnection', project.scmDeveloperConnection)
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', project.developerId)
                developer.appendNode('name', project.developerName)
                developer.appendNode('email', project.developerEmail)
            }

            // Hack to fix the scope of artifacts in the genreated POM
            // https://discuss.gradle.org/t/maven-publish-plugin-generated-pom-making-dependency-scope-runtime/7494
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'compile'}
            }
        }
    }
}

// Alias local publish
task install(dependsOn: 'publishToMavenLocal')

// Check if this is a release
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

// Configure automated bintray upload
// Loads secure properties from ~/.gradle/gradle.properties, env variables, or parameters
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['standard']

    //dryRun = true //Whether to run this as dry-run, without deploying
    publish = false //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = project.name
        desc = project.description
        websiteUrl = project.url
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        licenses = ['Apache-2.0']
        labels = ['curator','zookeeper']
        publicDownloadNumbers = true
        version {
            name = project.version
            released  = new Date()
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = false //isReleaseVersion
                user = project.hasProperty('ossUser') ? project.property('ossUser') : System.getenv('OSS_USER')
                password = project.hasProperty('ossPassword') ? project.property('ossPassword') : System.getenv('OSS_PASSWORD')
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

